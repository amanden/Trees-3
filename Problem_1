// Time Complexity : O(n) where n is the number of nodes in the tree
// Space Complexity : O(h) where h is the height of the tree
// Did this code successfully run on Leetcode : Yes

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        List<List<Integer>> outList = new ArrayList<>();
        List<Integer> sumLi = new ArrayList<>();
        pathSumHelper(root, sum, 0, outList, sumLi);
        return outList;
    }
    public void pathSumHelper(TreeNode root, int sum, int currSum, List<List<Integer>> outList, List<Integer> sumLi){
        if(root == null) return ;
        
        if(root.left == null && root.right == null) {
            List<Integer> temp = new ArrayList<>(sumLi);
            if(currSum + root.val == sum) {
                temp.add(root.val);
                outList.add(temp);
            }
        }
        sumLi.add(root.val);
        pathSumHelper(root.left, sum, currSum + root.val, outList, sumLi);
        pathSumHelper(root.right, sum, currSum + root.val, outList, sumLi);
        sumLi.remove(sumLi.size() - 1);
    }
}
